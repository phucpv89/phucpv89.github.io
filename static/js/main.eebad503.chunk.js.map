{"version":3,"sources":["reducers/index.js","components/loading/index.js","containers/page-home/index.js","containers/page-error/index.js","containers/app.js","index.js","configure-store.js"],"names":["routeInitialState","location","routeReducer","state","arguments","length","undefined","action","type","LOCATION_CHANGE","Object","_Users_lap11675_local_Desktop_demo_web_app_master_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","payload","createReducer","injectedReducers","combineReducers","route","Loading","react_default","a","createElement","React","PureComponent","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","page_error","App","Switch","Route","exact","path","component","PageHome","PageError","history","createHistory","store","initialState","middlewares","thunk","routerMiddleware","enhancers","applyMiddleware","apply","composeEnhancers","compose","createStore","configureStore","MOUNT_NODE","document","getElementById","ReactDOM","render","es","react_router_redux_es","app"],"mappings":"kJAgBMA,EAAoB,CACxBC,SAAU,MAML,SAASC,IAAgD,IAAnCC,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3BJ,EAAmBO,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9D,OAAQC,EAAOC,MAEb,KAAKC,IACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFP,EADL,CAEEF,SAAUM,EAAOK,UAErB,QACE,OAAOT,GAOE,SAASU,EAAcC,GACpC,OAAOC,YAAgBL,OAAAC,EAAA,EAAAD,CAAA,CACrBM,MAAOd,GACJY,wRCxCcG,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,6BAH+BC,IAAMC,eCuB5BC,MAAS,CACtBC,OAnBc,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAoBpBC,QAASd,ICzBIe,EAAA,kBAAMd,EAAAC,EAAAC,cAAA,qBCWNa,EAPH,kBACVf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjCrB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,GAAGC,UAAWE,MCoBxBC,EAAUC,MACVC,ECpBS,WAAoD,IAA5BC,EAA4BxC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAb,GAAIqC,EAASrC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAI3DuC,EAAc,CAACC,IAAOC,YAAiBN,IAEvCO,EAAY,CAACC,IAAeC,WAAf,EAAmBL,IAIhCM,EASAC,IAGAT,EAAQU,YACZxC,cACA+B,EACAO,EAAgBD,WAAhB,EAAoBF,IActB,OAVAL,EAAM7B,iBAAmB,GAUlB6B,EDnBKW,CAFO,GAEsBb,GAErCc,EAAaC,SAASC,eAAe,QAMzCC,IAASC,OACPzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAUjB,MAAOA,GACfzB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAiBpB,QAASA,GACxBvB,EAAAC,EAAAC,cAAC0C,EAAD,QAGJP","file":"static/js/main.eebad503.chunk.js","sourcesContent":["/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux';\nimport { LOCATION_CHANGE } from 'react-router-redux';\n\n/*\n * routeReducer\n *\n * The reducer merges route location changes into our immutable state.\n * The change is necessitated by moving to react-router-redux@5\n *\n */\n\n// Initial routing state\nconst routeInitialState = {\n  location: null\n};\n\n/**\n * Merge route into the global application state\n */\nexport function routeReducer(state = routeInitialState, action) {\n  switch (action.type) {\n    /* istanbul ignore next */\n    case LOCATION_CHANGE:\n      return {\n        ...state,\n        location: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n/**\n * Creates the main reducer with the dynamically injected ones\n */\nexport default function createReducer(injectedReducers) {\n  return combineReducers({\n    route: routeReducer,\n    ...injectedReducers\n  });\n}\n","import React from 'react';\n\nexport default class Loading extends React.PureComponent {\n  render() {\n    return (\n      <div>Loading</div>\n    );\n  }\n}\n","import Loadable from 'react-loadable';\n\nimport Loading from '../../components/loading';\n\n/**\n * Case not show loading\n */\nconst preload = () => import('./page-home');\n\n/**\n * Case show loading\n */\n// const preload = () =>\n//   new Promise((resolve) => {\n//     Promise.all([\n//       // list promise here, can be loading images\n//     ])\n//       .then(() => {\n//         resolve(import('./index'));\n//       })\n//       .catch(() => {\n//         resolve(import('../../Error'));\n//       });\n//   });\n\nexport default Loadable({\n  loader: preload,\n  loading: Loading\n});\n","import React from 'react';\n\nexport default () => <div>Error</div>;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport PageHome from './page-home';\nimport PageError from './page-error';\n\nconst App = () => (\n  <Switch>\n    <Route exact path=\"/\" component={PageHome} />\n    <Route path=\"\" component={PageError} />\n  </Switch>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\n\n/**\n * Redux and router, remove this if redux is not needed\n */\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'react-router-redux';\n\n/**\n * createHashHistory: hash history\n * createBrowserHistory: browser history\n * remove this if redux is not needed\n */\nimport createHistory from 'history/createHashHistory';\n\n/**\n * remove this if redux is not needed\n */\nimport configureStore from './configure-store';\n\nimport App from './containers/app';\n\n/**\n * remove this if redux is not needed\n */\nconst initialState = {};\nconst history = createHistory();\nconst store = configureStore(initialState, history);\n\nconst MOUNT_NODE = document.getElementById('root');\n\n/**\n * If using redux and router\n */\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>,\n    MOUNT_NODE\n  );\n};\n\n/**\n * If using redux\n */\n// const render = () => {\n//   ReactDOM.render(\n//     <Provider store={store}>\n//       <App />\n//     </Provider>,\n//     MOUNT_NODE\n//   );\n// };\n\n/**\n * If not using redux and router\n */\n// const render = () => {\n//   ReactDOM.render(<App />, MOUNT_NODE);\n// };\n\nif (module.hot) {\n  // Hot reloadable React components and translation json files\n  // modules.hot.accept does not accept dynamic dependencies,\n  // have to be constants at compile-time\n  module.hot.accept(['./containers/app'], () => {\n    ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n    render();\n  });\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'react-router-redux';\nimport thunk from 'redux-thunk';\n\nimport createReducer from './reducers';\n\nexport default function configureStore(initialState = {}, history) {\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [thunk, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle, indent */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n          // Prevent recomputing reducers for `replaceReducer`\n          shouldHotReload: false\n        })\n      : compose;\n  /* eslint-enable */\n\n  const store = createStore(\n    createReducer(),\n    initialState,\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.injectedReducers = {}; // Reducer registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"],"sourceRoot":""}